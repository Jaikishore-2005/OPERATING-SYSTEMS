#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/stat.h>

#define FILE_NAME "message_queue"

struct message_buffer {
    long message_type;
    char message_text[100];
};

int main() {
    // Check if the file exists, if not, create it
    struct stat st;
    if (stat(FILE_NAME, &st) == -1) {
        FILE *file = fopen(FILE_NAME, "w");
        if (file == NULL) {
            perror("File creation");
            exit(EXIT_FAILURE);
        }
        fclose(file);
    }

    // Generate key
    key_t key = ftok(FILE_NAME, 'B');
    if (key == -1) {
        perror("ftok");
        exit(EXIT_FAILURE);
    }

    // Create message queue
    int message_queue_id = msgget(key, 0666 | IPC_CREAT);
    if (message_queue_id == -1) {
        perror("msgget");
        exit(EXIT_FAILURE);
    }

    struct message_buffer message;

    // Send message
    message.message_type = 1;
    printf("Enter message to send: ");
    fgets(message.message_text, 100, stdin);

    if (msgsnd(message_queue_id, &message, sizeof(message), 0) == -1) {
        perror("msgsnd");
        exit(EXIT_FAILURE);
    }

    printf("Message sent: %s", message.message_text);

    // Receive message
    if (msgrcv(message_queue_id, &message, sizeof(message), 1, 0) == -1) {
        perror("msgrcv");
        exit(EXIT_FAILURE);
    }

    printf("Received Message: %s", message.message_text);

    // Remove message queue
    if (msgctl(message_queue_id, IPC_RMID, NULL) == -1) {
        perror("msgctl");
        exit(EXIT_FAILURE);
    }

    return 0;
}
