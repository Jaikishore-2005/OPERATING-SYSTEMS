#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_EMPLOYEES 100
#define FILENAME "employee_data.dat"

struct Employee {
    int empID;
    char name[50];
    float salary;
};

void addEmployee() {
    struct Employee emp;
    FILE *file = fopen(FILENAME, "ab");
    
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    printf("Enter Employee ID: ");
    scanf("%d", &emp.empID);
    printf("Enter Name: ");
    scanf("%s", emp.name);
    printf("Enter Salary: ");
    scanf("%f", &emp.salary);

    fwrite(&emp, sizeof(struct Employee), 1, file);
    fclose(file);
}

void displayEmployees() {
    struct Employee emp;
    FILE *file = fopen(FILENAME, "rb");

    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    printf("Employee Details:\n");
    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        printf("ID: %d, Name: %s, Salary: %.2f\n", emp.empID, emp.name, emp.salary);
    }

    fclose(file);
}

void searchEmployee() {
    int id;
    struct Employee emp;
    FILE *file = fopen(FILENAME, "rb");

    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    printf("Enter Employee ID to search: ");
    scanf("%d", &id);

    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        if (emp.empID == id) {
            printf("Employee found:\n");
            printf("ID: %d, Name: %s, Salary: %.2f\n", emp.empID, emp.name, emp.salary);
            fclose(file);
            return;
        }
    }

    printf("Employee with ID %d not found.\n", id);
    fclose(file);
}

void updateEmployee() {
    int id;
    struct Employee emp;
    FILE *file = fopen(FILENAME, "r+b");

    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    printf("Enter Employee ID to update: ");
    scanf("%d", &id);

    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        if (emp.empID == id) {
            printf("Enter new Name: ");
            scanf("%s", emp.name);
            printf("Enter new Salary: ");
            scanf("%f", &emp.salary);

            fseek(file, -sizeof(struct Employee), SEEK_CUR);
            fwrite(&emp, sizeof(struct Employee), 1, file);
            printf("Employee details updated.\n");
            fclose(file);
            return;
        }
    }

    printf("Employee with ID %d not found.\n", id);
    fclose(file);
}

void deleteEmployee() {
    int id;
    struct Employee emp;
    FILE *file = fopen(FILENAME, "r+b");
    FILE *temp = fopen("temp.dat", "wb");

    if (file == NULL || temp == NULL) {
        printf("Error opening file.\n");
        return;
    }

    printf("Enter Employee ID to delete: ");
    scanf("%d", &id);

    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        if (emp.empID != id) {
            fwrite(&emp, sizeof(struct Employee), 1, temp);
        }
    }

    fclose(file);
    fclose(temp);

    remove(FILENAME);
    rename("temp.dat", FILENAME);
    printf("Employee with ID %d deleted successfully.\n", id);
}

int main() {
    int choice;

    do {
        printf("\nEmployee Management System\n");
        printf("1. Add Employee\n");
        printf("2. Display All Employees\n");
        printf("3. Search Employee\n");
        printf("4. Update Employee\n");
        printf("5. Delete Employee\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addEmployee();
                break;
            case 2:
                displayEmployees();
                break;
            case 3:
                searchEmployee();
                break;
            case 4:
                updateEmployee();
                break;
            case 5:
                deleteEmployee();
                break;
            case 6:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 6);

    return 0;
}
